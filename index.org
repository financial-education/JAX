#+title: JAX
#+author: Matt Brigida, Ph.D.
#+email: matthew.brigida@sunypoly.edu
#+PROPERTY: header-args :eval yes
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup


#+begin_comment
## try linear reg from here:
## https://coax.readthedocs.io/en/latest/examples/linear_regression/jax.html
#+end_comment


#+BEGIN_SRC python :exports both :session *jax* :results values
import pandas as pd
import yfinance as yf
import jax
import jax.numpy as jnp
from sklearn.datasets import make_regression
from sklearn.model_selection import train_test_split

market = yf.Ticker("SPY")
market_data = market.history(period="1y")

target = yf.Ticker("GME")
target_data = target.history(period="1y")

market_returns = market_data["Close"].pct_change()[1:]
target_returns = target_data["Close"].pct_change()[1:]

X, X_test, y, y_test = train_test_split(market_returns.values, target_returns.values)

# model weights
params = {
    'w': jnp.zeros(X.shape[1:]),
    'b': 0.
}


def forward(params, X):
    return jnp.dot(X, params['w']) + params['b']


def loss_fn(params, X, y):
    err = forward(params, X) - y
    return jnp.mean(jnp.square(err))  # mse


grad_fn = jax.grad(loss_fn)


def update(params, grads):
    return jax.tree_multimap(lambda p, g: p - 0.05 * g, params, grads)


# the main training loop
for _ in range(50):
    loss = loss_fn(params, X_test, y_test)
    print(loss)

    grads = grad_fn(params, X, y)
    params = update(params, grads)
    print(params)
#+end_src

#+RESULTS:



#+BEGIN_SRC python :exports both :session *jax* :results output
print(params)
#+end_src

#+RESULTS:
: {'b': DeviceArray(0.00310496, dtype=float32, weak_type=True), 'w': DeviceArray(0.00163073, dtype=float32)}

This has a beta of 0.001, which does not make sense.


Check results

#+BEGIN_SRC python :exports both :session *jax* :results output
from sklearn.linear_model import LinearRegression
reg = LinearRegression().fit(X.reshape(-1,1), y)
print(reg.coef_)
#+end_src

#+RESULTS:
: [2.40756974]

So a beta of 2.4, which is reasonable.


