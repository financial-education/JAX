#+title: JAX
#+author: Matt Brigida, Ph.D.
#+email: matthew.brigida@sunypoly.edu
#+PROPERTY: header-args :eval yes
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup




#+name: import
#+BEGIN_SRC python :exports code :session *jax* :results none
import jax.numpy as jnp
from jax import grad, jit, vmap
from jax import random
import jax.scipy.optimize as sopt

import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split

import pandas as pd
import yfinance as yf
#+end_src


#+name: get_data
#+BEGIN_SRC python :exports code :session *jax* :results none
market = yf.Ticker("SPY")
market_data = market.history(period="1y")

target = yf.Ticker("GME")
target_data = target.history(period="1y")
#+end_src


#+name: convert_to_returns
#+BEGIN_SRC python :exports code :session *jax* :results none
market_returns = market_data["Close"].pct_change()[1:]
target_returns = target_data["Close"].pct_change()[1:]
#+end_src

#+name: corr_plot
#+BEGIN_SRC python :exports code :session *jax* :results none

#+end_src

#+begin_comment
#+end_comment


#+name: split
#+BEGIN_SRC python :exports code :session *jax* :results none
market_train, market_test, target_train, target_test  = train_test_split(market_returns.values, target_returns.values)
#+end_src



#+BEGIN_SRC python :exports code :session *jax* :results value

## try linear reg from here:
## https://coax.readthedocs.io/en/latest/examples/linear_regression/jax.html

# model weights
params = {
    'w': jnp.zeros(market_train.shape[1:]),
    'b': 0.
}

def forward(params, X):
    return jnp.dot(market_train, params['w']) + params['b']


def loss_fn(params, market_train, target_train):
    err = forward(params, market_train) - target_train
    return jnp.mean(jnp.square(err))  # mse

grad_fn = grad(loss_fn)

def update(params, grads):
    return tree_multimap(lambda p, g: p - 0.05 * g, params, grads)

# the main training loop
for _ in range(50):
    loss = loss_fn(params, market_test, target_test)
    print(loss)

    grads = grad_fn(params, market_train, target_train)
    params = update(params, grads)

#+end_src

#+RESULTS:
